importPackage(java.net),importPackage(java.lang),importPackage(org.itxtech.mcl.component),importPackage(org.apache.commons.cli),loader.options.addOption(Option.builder("p").desc("Set HTTP proxy").longOpt("proxy").optionalArg(!0).hasArg().argName("address").build()),loader.options.addOption(Option.builder("o").desc("Show Mirai Repo and Maven Repo").longOpt("show-repos").build()),loader.options.addOption(Option.builder("m").desc("Set Mirai Repo address").longOpt("set-mirai-repo").hasArg().argName("Address").build()),loader.options.addOption(Option.builder("v").desc("Set Maven Repo address").longOpt("set-maven-repo").hasArg().argName("Address").build()),loader.options.addOption(Option.builder("c").desc("Set log level").longOpt("log-level").hasArg().argName("level").build());let group=new OptionGroup;function updatePackage(e){loader.cli.hasOption("n")&&(e.channel=loader.cli.getOptionValue("n")),loader.cli.hasOption("t")&&(e.type=Config.Package.getType(loader.cli.getOptionValue("t"))),loader.cli.hasOption("w")&&(e.version=loader.cli.getOptionValue("w"))}group.addOption(Option.builder("s").desc("List configured packages").longOpt("list-packages").build()),group.addOption(Option.builder("r").desc("Remove package").longOpt("remove-package").hasArg().argName("PackageName").build()),group.addOption(Option.builder("a").desc("Add or update package").longOpt("update-package").hasArg().argName("PackageName").build()),loader.options.addOptionGroup(group),loader.options.addOption(Option.builder("n").desc("Set update channel of package").longOpt("channel").hasArg().argName("Channel").build()),loader.options.addOption(Option.builder("t").desc("Set type of package").longOpt("type").hasArg().argName("Type").build()),loader.options.addOption(Option.builder("w").desc("Set version of package").longOpt("version").hasArg().argName("Version").build()),phase.cli=(()=>{if(loader.cli.hasOption("p")&&(loader.config.proxy=loader.cli.getOptionValue("p",""),loader.saveConfig()),loader.cli.hasOption("o")&&(logger.info("Mirai Repo: "+loader.config.miraiRepo),logger.info("Maven Repo: "+loader.config.mavenRepo),System.exit(0)),loader.cli.hasOption("m")&&(loader.config.miraiRepo=loader.cli.getOptionValue("m"),loader.saveConfig()),loader.cli.hasOption("v")&&(loader.config.mavenRepo=loader.cli.getOptionValue("v"),loader.saveConfig()),loader.cli.hasOption("c")){let e=Integer.parseInt(loader.cli.getOptionValue("c"));logger.setLogLevel(e),loader.config.logLevel=e}if(loader.cli.hasOption("s")){let e=loader.config.packages;for(let a in e){let o=e[a];logger.info("Package: "+o.id+"  Channel: "+o.channel+"  Type: "+o.type+"  Version: "+o.version)}System.exit(0)}if(loader.cli.hasOption("r")){let e=loader.cli.getOptionValue("r"),a=loader.config.packages;for(let o in a){let i=a[o];i.id.equals(e)&&(a.remove(i),logger.info('Package "'+i.id+'" has been removed.'),loader.saveConfig(),System.exit(0))}logger.error('Package "'+e+'" not found.'),System.exit(1)}if(loader.cli.hasOption("a")){let e=loader.cli.getOptionValue("a"),a=loader.config.packages;for(let o in a){let i=a[o];i.id.equals(e)&&(updatePackage(i),logger.info('Package "'+i.id+'" has been updated.'),loader.saveConfig(),System.exit(0))}let o=new Config.Package(e,"stable");updatePackage(o),a.add(o),logger.info('Package "'+o.id+'" has been added.'),loader.saveConfig(),System.exit(0)}});